import logging
from typing import List, Dict, Any
import json
from datetime import datetime

logger = logging.getLogger(__name__)

class SwaggerGenerator:
    """
    Service to generate OpenAPI 3.0 (Swagger) specifications from parsed endpoint data.
    """
    
    def __init__(self):
        pass
    
    def generate_openapi_spec(self, endpoints: List[Dict[str, Any]], repo_name: str) -> Dict[str, Any]:
        """
        Generate an OpenAPI 3.0 specification from parsed endpoints.
        
        Args:
            endpoints: List of endpoint dictionaries with controller, method, http_method, and path
            repo_name: Name of the repository for documentation purposes
            
        Returns:
            Dictionary representing the OpenAPI 3.0 specification
        """
        logger.info(f"Generating OpenAPI spec for {repo_name} with {len(endpoints)} endpoints")
        
        # Create the base OpenAPI structure
        openapi_spec = {
            "openapi": "3.0.0",
            "info": {
                "title": f"{repo_name} API",
                "description": f"API documentation for {repo_name}",
                "version": "1.0.0",
                "contact": {
                    "name": "Generated by CodeDocGen"
                },
                "license": {
                    "name": "Generated on",
                    "url": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }
            },
            "paths": {},
            "components": {
                "schemas": {}
            }
        }
        
        # Process all endpoints
        for endpoint in endpoints:
            self._add_endpoint_to_spec(openapi_spec, endpoint)
        
        return openapi_spec
    
    def _add_endpoint_to_spec(self, openapi_spec: Dict[str, Any], endpoint: Dict[str, Any]) -> None:
        """
        Add a single endpoint to the OpenAPI specification.
        
        Args:
            openapi_spec: The OpenAPI specification dictionary being built
            endpoint: The endpoint dictionary to add
        """
        path = endpoint["path"]
        http_method = endpoint["http_method"].lower()
        controller = endpoint["controller"]
        method_name = endpoint["method"]
        
        # If the path doesn't exist yet, add it
        if path not in openapi_spec["paths"]:
            openapi_spec["paths"][path] = {}
        
        # Extract path parameters (those in {curly braces})
        path_params = []
        import re
        param_pattern = re.compile(r'\{([^}]+)\}')
        param_matches = param_pattern.findall(path)
        
        for param_name in param_matches:
            path_params.append({
                "name": param_name,
                "in": "path",
                "required": True,
                "schema": {
                    "type": "string"
                },
                "description": f"Path parameter: {param_name}"
            })
        
        # Add the endpoint method with details
        openapi_spec["paths"][path][http_method] = {
            "summary": method_name,
            "description": f"Controller: {controller}, Method: {method_name}",
            "tags": [controller],
            "responses": {
                "200": {
                    "description": "Successful operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "400": {
                    "description": "Bad request"
                },
                "404": {
                    "description": "Not found"
                },
                "500": {
                    "description": "Server error"
                }
            }
        }
        
        # Add parameters if they exist
        if path_params:
            openapi_spec["paths"][path][http_method]["parameters"] = path_params 