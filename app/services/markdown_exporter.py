import logging
from typing import List, Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class MarkdownExporter:
    """
    Service to generate Markdown documentation from parsed endpoint data.
    """
    
    def __init__(self):
        pass
    
    def generate_markdown(self, endpoints: List[Dict[str, Any]], repo_name: str) -> str:
        """
        Generate a Markdown document from parsed endpoints.
        
        Args:
            endpoints: List of endpoint dictionaries with controller, method, http_method, and path
            repo_name: Name of the repository for documentation purposes
            
        Returns:
            String containing the Markdown documentation
        """
        logger.info(f"Generating Markdown documentation for {repo_name} with {len(endpoints)} endpoints")
        
        # Create the markdown header
        markdown = f"""# API Documentation for {repo_name}

Generated by CodeDocGen on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Overview

This document provides documentation for all REST API endpoints detected in the project.

## Endpoints

"""
        
        # Group endpoints by controller
        controllers = {}
        for endpoint in endpoints:
            controller = endpoint["controller"]
            if controller not in controllers:
                controllers[controller] = []
            controllers[controller].append(endpoint)
        
        # Add each controller and its endpoints
        for controller, ctrl_endpoints in controllers.items():
            markdown += f"### {controller}\n\n"
            
            # Sort endpoints by path and method for readability
            sorted_endpoints = sorted(ctrl_endpoints, key=lambda e: (e["path"], e["http_method"]))
            
            for endpoint in sorted_endpoints:
                http_method = endpoint["http_method"]
                path = endpoint["path"]
                method_name = endpoint["method"]
                
                markdown += f"#### {http_method} {path}\n\n"
                markdown += f"**Controller:** {controller}\n\n"
                markdown += f"**Method:** {method_name}\n\n"
                
                # Add a horizontal rule between endpoints
                markdown += "---\n\n"
        
        return markdown 